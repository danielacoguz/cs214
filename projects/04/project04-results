Script started on 2022-02-10 13:00:23-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="174" LINES="13"]
]0;ldc6@gold26: ~/cs214/Projects/04[01;32mldc6@gold26[00m:[01;34m~/cs214/Projects/04[00m$ cat Factorial.java
/* LogTable.java displays a table of logarithms.
 *
 * Input: n as a double.
 * PRE: start < stop && increment > 0.
 * Output: A table of logarithms from start to stop,
 *         with increment as the step value.
 * Begun by: Nelesen, for CS 214 at Calvin College.
 * Completed by: Daniela Contreras ldc6
 ********************************************************/
import java.util.Scanner; 		// Get input

class Factorial{

    public static double factorial(double n) {
      
      double answer = 1.0;

      for (int i = 2; i <= n; i++) {
        answer *= i;
      }

      return answer;
   }

    public static void main(String[] args){
    Scanner keyboard = new Scanner(System.in);
    /* System.out.println("To display n factorial,");
    System.out.println("enter n: ");*/
    System.out.println ("\nTo compute n! \n enter n: ");
    double n;
    n = keyboard.nextDouble();
    
    System.out.println ("\nFactorial(n) is:  " + factorial(n));
}
  }
    


   ]0;ldc6@gold26: ~/cs214/Projects/04[01;32mldc6@gold26[00m:[01;34m~/cs214/Projects/04[00m$ javac -deprecation Factorial.java
]0;ldc6@gold26: ~/cs214/Projects/04[01;32mldc6@gold26[00m:[01;34m~/cs214/Projects/04[00m$ java Factorial

To compute n! 
 enter n: 
2

Factorial(n) is:  2.0
]0;ldc6@gold26: ~/cs214/Projects/04[01;32mldc6@gold26[00m:[01;34m~/cs214/Projects/04[00m$ java Factorial

To compute n! 
 enter n: 
4

Factorial(n) is:  24.0
]0;ldc6@gold26: ~/cs214/Projects/04[01;32mldc6@gold26[00m:[01;34m~/cs214/Projects/04[00m$ java Factorial

To compute n! 
 enter n: 
10

Factorial(n) is:  3628800.0
]0;ldc6@gold26: ~/cs214/Projects/04[01;32mldc6@gold26[00m:[01;34m~/cs214/Projects/04[00m$ java Factorial

To compute n! 
 enter n: 
7

Factorial(n) is:  5040.0
]0;ldc6@gold26: ~/cs214/Projects/04[01;32mldc6@gold26[00m:[01;34m~/cs214/Projects/04[00m$ java Factorial

To compute n! 
 enter n: 
12

Factorial(n) is:  4.790016E8
]0;ldc6@gold26: ~/cs214/Projects/04[01;32mldc6@gold26[00m:[01;34m~/cs214/Projects/04[00m$ java Factorial

To compute n! 
 enter n: 
5

Factorial(n) is:  120.0
]0;ldc6@gold26: ~/cs214/Projects/04[01;32mldc6@gold26[00m:[01;34m~/cs214/Projects/04[00m$ exit
exit

Script done on 2022-02-10 13:01:46-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-09 03:48:21-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="147" LINES="13"]
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ exitcat factorial.ada[K[Kdb
-- factorial.adb computes n factorial.
--
-- Input: x.
-- Precondition: x >= 1.
-- Output:n! in my case x!.
--
-- Begun by: Prof. Adams, for CS 214 at Calvin College.
-- Completed by: Daniela Contreras ldc6

--------------------------------------------------------------

with Ada.Text_IO, Ada.Integer_Text_IO; --utilized Ada.Integer_Text_I0 since we utilized integer type values
use  Ada.Text_IO, Ada.Integer_Text_IO;

procedure factorial is
-- does Ada have a double or should we usually use Float/integer?
   x, i : Integer; --definning n/x here 

function Factorial(x : Integer) return Integer is 
--making a function named Factorial
-- who's parameter type is is an Integer, variable x
      result : Integer; --return integer type is Integer and variable is "result"
      
      begin     --begins body  
         result := 1;  --for factorials, we can't have 0 or anything less than 1 so we initialize result to be 1
         i := 2; --iterator must then be 2 since that's the next integer when completing factorials
         for i in 2 .. x loop --setting range for iterator to be between 2 and x amount then looping through
            result := result * i; --result variable assigned to our result times the itrator amount taken after looping
         end loop; --ends loops

         return result; --returns result
      end; --terminates body

begin --begins body under Procedure
   Put( "the factorial of: "); --output to user
   Get(x); --obtains what user has inputed
   Put("is");  -- string to finish sentence 
   Put(Factorial(x) ); --obtains result from function Factorial (x)
end factorial;  -- end of entire program 

]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ gnatmake factorial
x86_64-linux-gnu-gcc-7 -c factorial.adb
x86_64-linux-gnu-gnatbind-7 -x factorial.ali
x86_64-linux-gnu-gnatlink-7 factorial.ali
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ ./factorial
the factorial of: 2
is          2
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ ./factorial
the factorial of: 1
is          1
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ ./factorial
the factorial of: 3
is          6
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ ./factorial
the factorial of: 4
is         24
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ ./factorial
the factorial of: 10
is    3628800
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ ./factorial
the factorial of: 5
is        120
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ ./factorial
the factorial of: 7
is       5040
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ ./factorial
the factorial of: 8
is      40320
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ exit
exit

Script done on 2022-02-11 03:50:07-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-11 14:02:34-05:00 [TERM="xterm-256color" TTY="/dev/pts/3" COLUMNS="174" LINES="13"]
]0;ldc6@gold32: ~/cs214/Projects/04/clojure[01;32mldc6@gold32[00m:[01;34m~/cs214/Projects/04/clojure[00m$ cat script.java script.ada script.clojure script.ruby >lab01-results[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cd 04[KProjects/[4Pcs2143[1Ps cs214[4Pexitcat script.java script.ada script.clojure script.ruby[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cd 04[KProjects/[4Pcs214[4Pexitclojure -m factorialat src/factorial.cljexit[Kcat src/factorial.clj
;;;; factorial.clj the factorial or whatever n the user inputs.
;;;;
;;;; Input: n.
;;;; Precondition: n = 1. i >= 2
;;;; Output: factorial number of n taken by multiplying n-1 until n = 2
;;;;
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Daniela Contreras
;;;; Date: 02/09/22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns factorial)                                 ; name the program

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; factorial() recursively generates the factorial numbers.
;;; Receive: n between 2 and n.
;;; Output: factorial number
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;IGNORE--was trying to do another loop but will still like top keep (lines19-30)
;;Using Loop recursion
;; loop (indirect-recursion) version
;(defn fatorial2 [n]
;  (loop [i = 2]                           ; set i to start
;    (when (<= i n)                       ; if i <= stop:
;      (printf "Factorial of %f is %f\n" 
;      (*n (factorial (- n 1)))
;      (recur (+ i 1))                    ; recurse, i += step
;    )
;  )
;)
;; direct-recursive version
 (defn factorial [n] ;;function named factorial taking n as its argument
 (if (>= n 0) ;;assuring n is equal to or greater than 0. This works because 0! is 1 and 1! is 1 too
  (if ( < n 2)1 ;;just like in our given code, here we say that if n is less than 2
    ( * n (factorial (- n 1))) ;;n ! is n times (n-1)
    )
    -1
    )
 
 )



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; -main is a 'driver' for the factorial() function.
;;; Input: n.
;;; Output: n!
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn -main []
 (println "To display factorial for n,")
 (print " enter n: ") (flush)
 (let
    [ n (double (read))
    ] 
    (println)
    (print n)(flush)
    (printf "\nFactorial = %f"(factorial n))
    (println) 
 )
)

]0;ldc6@gold32: ~/cs214/Projects/04/clojure[01;32mldc6@gold32[00m:[01;34m~/cs214/Projects/04/clojure[00m$ cat src/factorial.cljcript.java script.ada script.clojure script.ruby >lab01-results[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cd 04[KProjects/[4Pcs2143[1Ps cs214[4Pexitcat script.java script.ada script.clojure script.ruby[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cd 04[KProjects/[4Pcs214[4Pexitclojure -m factorial
To display factorial for n,
 enter n: 2

2.0
Factorial = 2.000000
]0;ldc6@gold32: ~/cs214/Projects/04/clojure[01;32mldc6@gold32[00m:[01;34m~/cs214/Projects/04/clojure[00m$ clojure -m factorial
To display factorial for n,
 enter n: 3

3.0
Factorial = 6.000000
]0;ldc6@gold32: ~/cs214/Projects/04/clojure[01;32mldc6@gold32[00m:[01;34m~/cs214/Projects/04/clojure[00m$ clojure -m factorial
To display factorial for n,
 enter n: 5

5.0
Factorial = 120.000000
]0;ldc6@gold32: ~/cs214/Projects/04/clojure[01;32mldc6@gold32[00m:[01;34m~/cs214/Projects/04/clojure[00m$ clojure -m factorial
To display factorial for n,
 enter n: 4

4.0
Factorial = 24.000000
]0;ldc6@gold32: ~/cs214/Projects/04/clojure[01;32mldc6@gold32[00m:[01;34m~/cs214/Projects/04/clojure[00m$ clojure -m factorial
To display factorial for n,
 enter n: 12

12.0
Factorial = 479001600.000000
]0;ldc6@gold32: ~/cs214/Projects/04/clojure[01;32mldc6@gold32[00m:[01;34m~/cs214/Projects/04/clojure[00m$ clojure -m factorial
To display factorial for n,
 enter n: 6

6.0
Factorial = 720.000000
]0;ldc6@gold32: ~/cs214/Projects/04/clojure[01;32mldc6@gold32[00m:[01;34m~/cs214/Projects/04/clojure[00m$ exit
exit

Script done on 2022-02-11 14:03:31-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-11 03:27:14-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="147" LINES="13"]
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ cat factorial.rb
#! /usr/bin/ruby
# factorial.rb displays a table of logarithms
#
# Begun by: Prof. Adams, for CS 214 at Calvin College.
# Completed by: Daniela Contreras ldc6
# Date: 02/07/22
# Input:  n can be any integer
# Precondition: n must be any number > 0
#    
# Output:factorial of n 

def factorial (n)
      answer = 1

      for i in 2..n do
         answer *= i
      
      end
      return answer
end

if __FILE__ == $0
   print "Enter n value: "
####below code -> GET THESE VALUES AS NUMBERS
   n = gets.chomp.to_f ###initializing variable Start
   print n
   print "! = "
   puts factorial(n)
  
end

]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ ruby factorial.rb
Enter n value: 2
2.0! = 2
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ ruby factorial.rb
Enter n value: 4
4.0! = 24
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ ruby factorial.rb
Enter n value: 5
5.0! = 120
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ ruby factorial.rb
Enter n value: 10
10.0! = 3628800
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ ruby factorial.rb
Enter n value: 6
6.0! = 720
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ ruby factorial.rb
Enter n value: 1
1.0! = 1
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ ruby factorial.rb
Enter n value: 0
0.0! = 1
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ ruby factorial.rb
Enter n value: 4 9
9.0! = 362880
]0;ldc6@remotel3: ~/cs214/Projects/04[01;32mldc6@remotel3[00m:[01;34m~/cs214/Projects/04[00m$ exit
exit

Script done on 2022-02-11 03:30:42-05:00 [COMMAND_EXIT_CODE="0"]
