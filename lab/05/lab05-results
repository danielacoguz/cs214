Script started on 2022-02-11 14:16:26-05:00 [TERM="xterm-256color" TTY="/dev/pts/5" COLUMNS="80" LINES="24"]
]0;ldc6@gold32: ~[01;32mldc6@gold32[00m:[01;34m~[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (+ 1 2 3 4 5)user=> (+ 1 2 3 4 5)user=> [K(+ 1 2 3 4 5)
15
user=> [Kuser=> [Kuser=> 
[K]0;ldc6@gold32: ~[01;32mldc6@gold32[00m:[01;34m~[00m$ exit

Script done on 2022-02-11 14:21:57-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-11 14:33:52-05:00 [TERM="xterm-256color" TTY="/dev/pts/5" COLUMNS="80" LINES="24"]
]0;ldc6@gold32: ~[01;32mldc6@gold32[00m:[01;34m~[00m$ src   clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (+ 1 2 3 4 5)user=> ([16@print "Welcome to Clojure!")user=> (print[2@ln "Welcome to Clojure!")user=> (print[2P "Welcome to Clojure!")user=> ([16P+ 1 2 3 4 5)user=> [K(fn [x][x] (x + xx)(+ xx)   x)(+ x x))user=> (fn [x] (+ x x))  )user=> (fn [x] (+ x x) )user=> [K(fn [x] (+ x x) )
[K#object[user$eval136$fn__137 0x29182679 "user$eval136$fn__137@29182679"]
user=> [Kuser=> [Kuser=> ((fn [x][x] (x    x +  + xx    x)(+ x x))user=> ((fn [x] (+ x x)) 21)user=> ((fn [x] (+ x x)) 21)  user=> [K((fn [x] (+ x x)) 21)
42
user=> [Kuser=> [Kuser=> ((fn [x y][x y] (+(* x x)(* x x) (* y y)(* y y))(+(* x x) (* y y)))user=> ((fn [x y] (+(* x x) (* y y))) 3 4)user=> ((fn [x y] (+(* x x) (* y y))) 3 4)user=> [K((fn [x y] (+(* x x) (* y y))) 3 4)
25
user=> [Kuser=> [Kuser=> 
[K]0;ldc6@gold32: ~[01;32mldc6@gold32[00m:[01;34m~[00m$ exit

Script done on 2022-02-11 15:02:54-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-11 16:00:57-05:00 [TERM="xterm-256color" TTY="/dev/pts/5" COLUMNS="80" LINES="24"]
]0;ldc6@gold32: ~[01;32mldc6@gold32[00m:[01;34m~[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> ((fn [x y z][x y z] (max (Math/abs x)(Math/abs x) (Math/abs y)(Math/abs y) (Math/abs z)(Math/abs z))user=> ((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z)))user=> ((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z))) -2 -4 7 )user=> ((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z))) -2 -4 7 )user=> [K((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z))) -2 -4 7 )
[K7
user=> [Kuser=> [Kuser=> ((fn [x y z][x y z] (max (Math/abs x)(Math/abs x) (Math/abs y)(Math/abs y) (Math/abs z)(Math/abs z))user=> ((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z)))user=> ((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z))) 3 21 -7 )user=> ((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z))) 3 21 -7 )user=> [K((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z))) 3 21 -7 )
21
user=> [Kuser=> [Kuser=> ((fn [x y z][x y z] (max (Math/abs x)(Math/abs x) (Math/abs y)(Math/abs y) (Math/abs z)(Math/abs z))user=> ((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z)))user=> ((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z))) 8 -10 -15)user=> ((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z))) 8 -10 -15)user=> [K((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z))) 8 -10 -15)
15
user=> [Kuser=> [Kuser=> ((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z))) 8 -10 -15)   100)user=> ((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z))) 8 -10 -100)user=> [K((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z))) 8 -10 -100)
100
user=> [Kuser=> [Kuser=> ((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z))) 8 -10 -100)           -8 -6 -1)user=> ((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z))) -8 -6 -1)user=> [K((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z))) -8 -6 -1)
8
user=> [Kuser=> [Kuser=> 
[K]0;ldc6@gold32: ~[01;32mldc6@gold32[00m:[01;34m~[00m$ exit

Script done on 2022-02-11 16:02:52-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-11 16:21:29-05:00 [TERM="xterm-256color" TTY="/dev/pts/4" COLUMNS="80" LINES="24"]
]0;ldc6@gold32: ~[01;32mldc6@gold32[00m:[01;34m~[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> ((fn [x y z][x y z] (+ x y z)(+ x y z))user=> ((fn [x y z] (+ x y z)) 3 4 5)user=> ((fn [x y z] (+ x y z)) 3 4 5)user=> [K((fn [x y z] (+ x y z)) 3 4 5)
[K12
user=> [Kuser=> [Kuser=> ((fn [x][x] (nil? x)(nil? x))user=> ((fn [x] (nil? x)) 6 )user=> ((fn [x] (nil? x)) 6 )user=> [K((fn [x] (nil? x)) 6 )
false
user=> [Kuser=> [Kuser=> ((fn [][] 17.2)user=> ((fn [] 17.2))user=> ((fn [] 17.2))user=> [K((fn [] 17.2))
17.2
user=> [Kuser=> [Kuser=> ((fn [x y z][x y z] (+ x y z)(+ x y z))user=> ((fn [x y z] (+ x y z)) 3 4 5)user=> ((fn [x y z] (+ x y z)) 3 4 5)  8)user=> ((fn [x y z] (+ x y z)) 3 4 8)user=> [K((fn [x y z] (+ x y z)) 3 4 8)
15
user=> [Kuser=> [Kuser=> ((fn [x][x] (nil? x)(nil? x))user=> ((fn [x] (nil? x)) 6 )user=> ((fn [x] (nil? x)) 6 )   nil )user=> ((fn [x] (nil? x)) nil )user=> [K((fn [x] (nil? x)) nil )
true
user=> [Kuser=> [Kuser=> ((fn [][] 17.2)user=> ((fn [] 17.2))user=> ((fn [] 17.2))user=> [K((fn [] 17.2))
17.2
user=> [Kuser=> [Kuser=> 
[K]0;ldc6@gold32: ~[01;32mldc6@gold32[00m:[01;34m~[00m$ exit

Script done on 2022-02-11 16:23:42-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-11 17:13:57-05:00 [TERM="xterm-256color" TTY="/dev/pts/4" COLUMNS="80" LINES="24"]
]0;ldc6@gold32: ~[01;32mldc6@gold32[00m:[01;34m~[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (#(+ (* %1 %1)(* %1 %1) (* %2 %2)(* %2 %2))user=> (#(+ (* %1 %1) (* %2 %2)) 3 4)user=> (#(+ (* %1 %1) (* %2 %2)) 3 4)user=> [K(#(+ (* %1 %1) (* %2 %2)) 3 4)
25
user=> [Kuser=> [Kuser=> (def sum2Squares #(+ (* %1 %1)(* %1 %1) (* %2 %2)(* %2 %2))(+ (* %1 %1) (* %2 %2)))user=> (def sum2Squares #(+ (* %1 %1) (* %2 %2)))user=> [K(def sum2Squares #(+ (* %1 %1) (* %2 %2)))
#'user/sum2Squares
user=> [Kuser=> [Kuser=> (sum2Squares 3 4)user=> (sum2Squares 3 4)user=> [K(sum2Squares 3 4)
25
user=> [Kuser=> [Kuser=> (def triple (fn [x][x] (* x 3)(* x 3))(fn [x] (* x 3)))user=> (def triple (fn [x] (* x 3)))user=> [K(def triple (fn [x] (* x 3)))
[K#'user/triple
user=> [Kuser=> [Kuser=> 
[K]0;ldc6@gold32: ~[01;32mldc6@gold32[00m:[01;34m~[00m$ exit

Script done on 2022-02-11 17:18:19-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-11 17:32:26-05:00 [TERM="xterm-256color" TTY="/dev/pts/4" COLUMNS="80" LINES="24"]
]0;ldc6@gold32: ~[01;32mldc6@gold32[00m:[01;34m~[00m$ clojure 
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (def squareSqur   quare #(* 5 % % % 5 %)(* % % % %))user=> (def squareSquare #(* % % % %))user=> [K(def squareSquare #(* % % % %))
#'user/squareSquare
user=> [Kuser=> [Kuser=> (sw quareSquare 2)user=> (squareSquare 2)user=> [K(squareSquare 2)
16
user=> [Kuser=> [Kuser=> (squareSquare 2)[1P)-)2)user=> [K(squareSquare -2)
16
user=> [Kuser=> [Kuser=> (squareSquare -2)[1P)[1P)[1P)[1P)) e 3)user=> (squareSquare 3)user=> [K(squareSquare 3)
81
user=> [Kuser=> [Kuser=> (squareSquare -3)user=> (squareSquare -3)user=> [K(squareSquare -3)
81
user=> [Kuser=> [Kuser=> 2a  
[K]0;ldc6@gold32: ~[01;32mldc6@gold32[00m:[01;34m~[00m$ exit

Script done on 2022-02-11 17:37:17-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-11 21:42:01-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=>  (map inc [1 2 3 4][1 2 3 4])user=>  (map inc [1 2 3 4]) user=> [K (map inc [1 2 3 4]) 
(2 3 4 5)
user=> [Kuser=> [Kuser=> (map - [1 2 3 4][1 2 3 4])user=> (map - [1 2 3 4])user=> [K(map - [1 2 3 4])
(-1 -2 -3 -4)
user=> [Kuser=> [Kuser=> (map - [1 2 3 4][1 2 3 4] [1 2 3 4][1 2 3 4])user=> (map - [1 2 3 4] [1 2 3 4])user=> [K(map - [1 2 3 4] [1 2 3 4])
(0 0 0 0)
user=> [Kuser=> [Kuser=>  (map even? [1 2 3 4][1 2 3 4])user=>  (map even? [1 2 3 4])user=> [K (map even? [1 2 3 4])
(false true false true)
user=> [Kuser=> [Kuser=>  (map str ["a" "b" "c"]["a" "b" "c"] ["A" "B" "C"]["A" "B" "C"])user=>  (map str ["a" "b" "c"] ["A" "B" "C"])user=> [K (map str ["a" "b" "c"] ["A" "B" "C"])
("aA" "bB" "cC")
user=> [Kuser=> [Kuser=>  (map count [[11][11] [11 22][11 22] [11 22 33][11 22 33]]user=>  (map count [[11] [11 22] [11 22 33]])user=>  (map count [[11] [11 22] [11 22 33]])user=> [K (map count [[11] [11 22] [11 22 33]])
(1 2 3)
user=> [Kuser=> [Kuser=> (map + [1 2 3 4][1 2 3 4] [1 2 3 4][1 2 3 4])user=> (map + [1 2 3 4] [1 2 3 4])user=> [K(map + [1 2 3 4] [1 2 3 4])
(2 4 6 8)
user=> [Kuser=> [Kuser=> (map * [1 2 3 4][1 2 3 4] [1 2 3 4][1 2 3 4])user=> (map * [1 2 3 4] [1 2 3 4])user=> [K(map * [1 2 3 4] [1 2 3 4])
(1 4 9 16)
user=> [Kuser=> [Kuser=>  (Math/abs -3)user=>  (Math/abs -3)user=> [K (Math/abs -3)
3
user=> [Kuser=> [Kuser=> (map Math/abs [-1 2 -3 4 -5][-1 2 -3 4 -5])user=> (map Math/abs [-1 2 -3 4 -5])user=> [K(map Math/abs [-1 2 -3 4 -5])
Syntax error compiling at (REPL:1:1).
Unable to find static field: abs in class java.lang.Math
user=> [Kuser=> [Kuser=> (map (fn [x][x] (if (< x 0)(< x 0) (- x)(- x) x)(if (< x 0) (- x) x))user=> (map (fn [x] (if (< x 0) (- x) x)) [-1 2 -3 4 -5][-1 2 -3 4 -5])user=> (map (fn [x] (if (< x 0) (- x) x)) [-1 2 -3 4 -5])user=> [K(map (fn [x] (if (< x 0) (- x) x)) [-1 2 -3 4 -5])
[K(1 2 3 4 5)
user=> [Kuser=> [Kuser=>  (defn subtract-n [n sequence][n sequence]user=> [K[K   [K (defn subtract-n [n sequence]
[K   (map (fn [x][x] (- x n)(- x n))   (map (fn [x] (- x n)) sequence)   (map (fn [x] (- x n)) sequence)[K[K   )[K   (map (fn [x] (- x n)) sequence)
[K   )[K   )
#'user/subtract-n
user=> [Kuser=> [Kuser=> (subtract-n 2 [5 6 7 8][5 6 7 8])user=> (subtract-n 2 [5 6 7 8])user=> [K(subtract-n 2 [5 6 7 8])
(3 4 5 6)
user=> [Kuser=> [Kuser=> (filter odd? [1 2 3 4][1 2 3 4])user=> (filter odd? [1 2 3 4])user=> [K(filter odd? [1 2 3 4])
(1 3)
user=> [Kuser=> [Kuser=> (filter even? [1 2 3 4][1 2 3 4])user=> (filter even? [1 2 3 4])user=> [K(filter even? [1 2 3 4])
(2 4)
user=> [Kuser=> [Kuser=> (filter neg? [1 2 3 4][1 2 3 4])user=> (filter neg? [1 2 3 4])user=> [K(filter neg? [1 2 3 4])
()
user=> [Kuser=> [Kuser=> (filter neg? [-1 1 -2 2 -3 3][-1 1 -2 2 -3 3])user=> (filter neg? [-1 1 -2 2 -3 3])user=> [K(filter neg? [-1 1 -2 2 -3 3])
(-1 -2 -3)
user=> [Kuser=> [Kuser=> (filter pos?  [-1 1 -2 2 -3 3][-1 1 -2 2 -3 3])user=> (filter pos?  [-1 1 -2 2 -3 3])user=> [K(filter pos?  [-1 1 -2 2 -3 3])
(1 2 3)
user=> [Kuser=> [Kuser=>  (filter (fn [x][x] (and (pos? x)(pos? x) (even? x)(even? x))(and (pos? x) (even? x)))user=>  (filter (fn [x] (and (pos? x) (even? x))) [-1 1 -2 2 -3 3 -4 4][-1 1 -2 2 -3 3 -4 4])user=>  (filter (fn [x] (and (pos? x) (even? x))) [-1 1 -2 2 -3 3 -4 4])user=> [K (filter (fn [x] (and (pos? x) (even? x))) [-1 1 -2 2 -3 3 -4 4])
(2 4)
user=> [Kuser=> [Kuser=> [-1 1 -2 2 -3 3 -4 4]user=> [-1 1 -2 2 -3 3 -4 4]user=> [K[-1 1 -2 2 -3 3 -4 4]
[-1 1 -2 2 -3 3 -4 4]
user=> [Kuser=> [Kuser=> (filter (fn [x][x] (and (neg? x)(neg? x) (odd? x)(odd? x))(and (neg? x) (odd? x)))user=> (filter (fn [x] (and (neg? x) (odd? x))) [-1 1 -2 2 -3 3 -4 4][-1 1 -2 2 -3 3 -4 4])user=> (filter (fn [x] (and (neg? x) (odd? x))) [-1 1 -2 2 -3 3 -4 4])user=> [K(filter (fn [x] (and (neg? x) (odd? x))) [-1 1 -2 2 -3 3 -4 4])
(-1 -3)
user=> [Kuser=> [Kuser=> (filter (fn [x][x] (or (neg? x)(neg? x) (odd? x)(odd? x))(or (neg? x) (odd? x)))user=> (filter (fn [x] (or (neg? x) (odd? x))) [-1 1 -2 2 -3 3 -4 4][-1 1 -2 2 -3 3 -4 4])user=> (filter (fn [x] (or (neg? x) (odd? x))) [-1 1 -2 2 -3 3 -4 4])user=> [K(filter (fn [x] (or (neg? x) (odd? x))) [-1 1 -2 2 -3 3 -4 4])
(-1 1 -2 -3 3 -4)
user=> [Kuser=> [Kuser=> 
[K]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ exit

Script done on 2022-02-11 22:55:52-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-11 23:21:52-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (defn negate [sequence][sequence]user=> [K[K    (map (fn [n][n][K(defn negate [sequence]
[K    (map (fn [n] (- 0 n )(- 0 n ))    (map (fn [n] (- 0 n )) sequence)    (map (fn [n] (- 0 n )) sequence)[K[K)[K    (map (fn [n] (- 0 n )) sequence)
[K)[K)
[K#'user/negate
user=> [Kuser=> [Kuser=>  (negate [-1 2 -3][-1 2 -3])user=>  (negate [-1 2 -3]) [1P(negate [-1 2 -3])user=> [K(negate [-1 2 -3])
(1 -2 3)
user=> [Kuser=> [Kuser=> (negate [4 -5 6][4 -5 6])user=> (negate [4 -5 6])user=> [K(negate [4 -5 6])
(-4 5 -6)
user=> [Kuser=> [Kuser=> 
[K]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ exit

Script done on 2022-02-11 23:24:15-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-11 23:28:09-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=>  (reduce + [1 2 3][1 2 3])user=>  (reduce + [1 2 3])user=> [K (reduce + [1 2 3])
6
user=> [Kuser=> [Kuser=> (reduce + '(1 2 3)(1 2 3))user=> [K(reduce + '(1 2 3))
6
user=> [Kuser=> [Kuser=> (reduce max [1 2 3][1 2 3])user=> (reduce max [1 2 3])user=> [K(reduce max [1 2 3])
3
user=> [Kuser=> [Kuser=> (reduce conj [1 2 3][1 2 3] [4 5 6][4 5 6])user=> (reduce conj [1 2 3] [4 5 6])user=> [K(reduce conj [1 2 3] [4 5 6])
[1 2 3 4 5 6]
user=> [Kuser=> [Kuser=> (reduce + [1 2 3 4 5][1 2 3 4 5])user=> (reduce + [1 2 3 4 5])user=> [K(reduce + [1 2 3 4 5])
15
user=> [Kuser=> [Kuser=>  (reduce + 1 [2 3 4 5][2 3 4 5])user=>  (reduce + 1 [2 3 4 5])user=> [K (reduce + 1 [2 3 4 5])
15
user=> [Kuser=> [Kuser=>  (reduce + 1 [2 3 4 5][2 3 4 5])user=>  (reduce + 1 [2 3 4 5])            2 [2 3 4 5][2 3 4 5])user=>  (reduce + 2 [2 3 4 5])user=> [K (reduce + 2 [2 3 4 5])
16
user=> [Kuser=> [Kuser=> (reduce + 1 '(2 3 4 5)(2 3 4 5))user=> [K(reduce + 1 '(2 3 4 5))
15
user=> [Kuser=> [Kuser=>  (reduce max 5 [4 3 2 1][4 3 2 1])user=>  (reduce max 5 [4 3 2 1])user=> [K (reduce max 5 [4 3 2 1])
5
user=> [Kuser=> [Kuser=>  (reduce max 5 [4 3 2 1][4 3 2 1])user=>  (reduce max 5 [4 3 2 1])   2][4 3 2 2])user=>  (reduce max 5 [4 3 2 2])user=> [K (reduce max 5 [4 3 2 2])
5
user=> [Kuser=> [Kuser=> (reduce bit-or [1 2 3 4][1 2 3 4])user=> (reduce bit-or [1 2 3 4])user=> [K(reduce bit-or [1 2 3 4])
7
user=> [Kuser=> [Kuser=> (reduce str ["a" "b" "c"]["a" "b" "c"])user=> (reduce str ["a" "b" "c"])user=> [K(reduce str ["a" "b" "c"])
"abc"
user=> [Kuser=> [Kuser=> (reduce + 1 2 [3 4 5][3 4 5])user=> (reduce + 1 2 [3 4 5])user=> [K(reduce + 1 2 [3 4 5])
Execution error (ArityException) at user/eval25 (REPL:1).
Wrong number of args (4) passed to: clojure.core/reduce
user=> [Kuser=> [Kuser=> (reduce + 1 '(2 3 4)(2 3 4) 5)user=> [K(reduce + 1 '(2 3 4) 5)
Execution error (ArityException) at user/eval27 (REPL:1).
Wrong number of args (4) passed to: clojure.core/reduce
user=> [Kuser=> [Kuser=> (defn csv [seq][seq]  user=> [K[K      (reduce (fn [a b][a b][K(defn csv [seq]  
[K      (reduce (fn [a b] (str a "," b)(str a "," b))      (reduce (fn [a b] (str a "," b)) seq)      (reduce (fn [a b] (str a "," b)) seq)[K[K   )[K      (reduce (fn [a b] (str a "," b)) seq)
[K   )[K   )
[K#'user/csv
user=> [Kuser=> [Kuser=> (csv [11 22 33][11 22 33])user=> (csv [11 22 33])user=> [K(csv [11 22 33])
"11,22,33"
user=> [Kuser=> [Kuser=>   (defn totalItems [seqOfSeqs][seqOfSeqs]user=> [K[K   (reduce + (map count seqOfSeqs)   (reduce + (map count seqOfSeqs)[K  (defn totalItems [seqOfSeqs]
[K   (reduce + (map count seqOfSeqs))   (reduce + (map count seqOfSeqs))[K[K  )[K   (reduce + (map count seqOfSeqs))
[K  )[K[K  )
[K  (totalItems [["Ann"]["Ann"][K
[K  (totalItems [["Ann"] ["Bob" "Chris"]["Bob" "Chris"] ["Dan" "Eve" "Fred"]["Dan" "Eve" "Fred"]]  (totalItems [["Ann"] ["Bob" "Chris"] ["Dan" "Eve" "Fred"]])  (totalItems [["Ann"] ["Bob" "Chris"] ["Dan" "Eve" "Fred"]])[K#'user/totalItems
user=> user=> [Kuser=> user=>   (totalItems [["Ann"] ["Bob" "Chris"] ["Dan" "Eve" "Fred"]])user=> user=> [K  (totalItems [["Ann"] ["Bob" "Chris"] ["Dan" "Eve" "Fred"]])
6
user=> [Kuser=> [Kuser=> 
[K]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ exit

Script done on 2022-02-11 23:55:43-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-12 00:16:25-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (defn sumSquares [sequence][sequence]user=> [K[K   (reduce + (map * sequence sequence)   (reduce + (map * sequence sequence)[K(defn sumSquares [sequence]
[K   (reduce + (map * sequence sequence))   (reduce + (map * sequence sequence)))[K   (reduce + (map * sequence sequence)))
[K#'user/sumSquares
user=> [Kuser=> [Kuser=>  (sumSquares '(1 2 3)(1 2 3))user=> [K (sumSquares '(1 2 3))
14
user=> [Kuser=> [Kuser=>  (sumSquares '(1 2 3 4 5)(1 2 3 4 5))user=> [K (sumSquares '(1 2 3 4 5))
55
user=> [Kuser=> [Kuser=> (sumSquares [-1 -2 -3 0 1][-1 -2 -3 0 1])user=> (sumSquares [-1 -2 -3 0 1])user=> [K(sumSquares [-1 -2 -3 0 1])
15
user=> [Kuser=> [Kuser=> 
[K]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ exit

Script done on 2022-02-12 00:18:22-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-12 00:36:25-05:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="80" LINES="24"]
]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (defn incMaker [incValue][incValue]user=> [K[K   (fn [x][x][K(defn incMaker [incValue]
[K   (fn [x][K[K     (+ x incValue)     (+ x incValue)[K   (fn [x]
[K     (+ x incValue)[K[K   )[K     (+ x incValue)
[K   )[K[K)[K   )
[K)[K)
[K#'user/incMaker
user=> [Kuser=> [Kuser=> inc5[Kinc5
Syntax error compiling at (REPL:0:0).
Unable to resolve symbol: inc5 in this context
user=> [Kuser=> [Kuser=> inc5[1@ [1@( inc5 5)user=> ( inc5 5)user=> [K( inc5 5)
Syntax error compiling at (REPL:1:1).
Unable to resolve symbol: inc5 in this context
user=> [Kuser=> [Kuser=> (defn incMaker [incValue][incValue]user=> [K[K   (fn [x][x][K(defn incMaker [incValue]
[K   (fn [x][K[K     (+ x incValue)     (+ x incValue)[K   (fn [x]
[K     (+ x incValue)[K[K   )[K     (+ x incValue)
[K   )[K[K)[K   )
[K)[K)
#'user/incMaker
user=> [Kuser=> [Kuser=> ( inc5  )( inc5)( [K( inc5)
Syntax error compiling at (REPL:1:1).
Unable to resolve symbol: inc5 in this context
user=> [Kuser=> [Kuser=> (defn incMaker [incValue][incValue]user=> [K[K   (fn [x][x][K(defn incMaker [incValue]
[K   (fn [x][K[K     (+ x incValue)     (+ x incValue)[K   (fn [x]
[K     (+ x incValue)[K[K   )[K     (+ x incValue)
[K   )[K[K)[K   )
[K)[K)
#'user/incMaker
user=> [Kuser=> [Kuser=> (inc5 5)(inc5 5)[K(inc5 5)
Syntax error compiling at (REPL:1:1).
Unable to resolve symbol: inc5 in this context
user=> [Kuser=> [Kuser=> 
[K]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ script 5.script
Script started, file is 5.script
]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (defn incMaker [incValue][incValue]user=> [K[K   #(+ % incValue)   #(+ % incValue)[K(defn incMaker [incValue]
[K   #(+ % incValue)[K[K)[K   #(+ % incValue)
[K)[K)
[K#'user/incMaker
user=> [Kuser=> [Kuser=> (inc5 5)(inc5 5)[K(inc5 5)
Syntax error compiling at (REPL:1:1).
Unable to resolve symbol: inc5 in this context
user=> [Kuser=> [Kuser=> 
[K]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ script.  5.script
Script started, file is 5.script
]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (defn incMaker [incValue][incValue]user=> [K[K   (fn [x][x][K(defn incMaker [incValue]
[K   (fn [x][K[K     (+ x incValue)     (+ x incValue)[K   (fn [x]
[K     (+ x incValue)[K[K   )[K     (+ x incValue)
[K   )[K[K)[K   )
[K)[K)
[K#'user/incMaker
user=> [Kuser=> [Kuser=> (def inc5 (incMaker 5)(incMaker 5))user=> (def inc5 (incMaker 5))user=> [K(def inc5 (incMaker 5))
#'user/inc5
user=> [Kuser=> [Kuser=> inc5 [1@ [1@( inc5  5 ) user=> ( inc5 5)user=> [K( inc5 5) 
10
user=> [Kuser=> [Kuser=> (defn greetingBuilder [greeting][greeting]user=> [K[K   (fn [visitor]   (fn [visitor][K(defn greetingBuilder [greeting]
[K   (fn [visitor][K[K      (str greeting ", " visitor "!")      (str greeting ", " visitor "!")[K   (fn [visitor]
[K      (str greeting ", " visitor "!")[K[K   )[K      (str greeting ", " visitor "!")
[K   )[K[K)[K   )
[K)[K)
#'user/greetingBuilder
user=> [Kuser=> [Kuser=> (def csGreeting (greetingBuilder "Welcome to CS 214")user=> (def csGreeting (greetingBuilder "Welcome to CS 214"))user=> (def csGreeting (greetingBuilder "Welcome to CS 214"))user=> [K(def csGreeting (greetingBuilder "Welcome to CS 214"))
#'user/csGreeting
user=> [Kuser=> [Kuser=> (def englishGreeting (greetingBuilder "Hello")(greetingBuilder "Hello"))user=> (def englishGreeting (greetingBuilder "Hello"))user=> [K(def englishGreeting (greetingBuilder "Hello"))
#'user/englishGreeting
user=> [Kuser=> [Kuser=> (def frenchGreeting (greetingBuilder "Bonjour")(greetingBuilder "Bonjour"))user=> (def frenchGreeting (greetingBuilder "Bonjour"))user=> [K(def frenchGreeting (greetingBuilder "Bonjour"))
#'user/frenchGreeting
user=> [Kuser=> [Kuser=> (csGreeting "Ann")user=> (csGreeting "Ann")user=> [K(csGreeting "Ann")
"Welcome to CS 214, Ann!"
user=> [Kuser=> [Kuser=> (englishGreeting "Chris")user=> (englishGreeting "Chris")user=> [K(englishGreeting "Chris")
"Hello, Chris!"
user=> [Kuser=> [Kuser=> (frenchGreeting "Chris")user=> (frenchGreeting "Chris")user=> [K(frenchGreeting "Chris")
"Bonjour, Chris!"
user=> [Kuser=> [Kuser=> 
[K]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ exit
Script done, file is 5.script
]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ cat 5.script
Script started on 2022-02-12 00:45:14-05:00 [TERM="xterm-256color" TTY="/dev/pts/7" COLUMNS="80" LINES="24"]
]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (defn incMaker [incValue][incValue]user=> [K[K   (fn [x][x][K(defn incMaker [incValue]
[K   (fn [x][K[K     (+ x incValue)     (+ x incValue)[K   (fn [x]
[K     (+ x incValue)[K[K   )[K     (+ x incValue)
[K   )[K[K)[K   )
[K)[K)
[K#'user/incMaker
user=> [Kuser=> [Kuser=> (def inc5 (incMaker 5)(incMaker 5))user=> (def inc5 (incMaker 5))user=> [K(def inc5 (incMaker 5))
#'user/inc5
user=> [Kuser=> [Kuser=> inc5 [1@ [1@( inc5  5 ) user=> ( inc5 5)user=> [K( inc5 5) 
10
user=> [Kuser=> [Kuser=> (defn greetingBuilder [greeting][greeting]user=> [K[K   (fn [visitor]   (fn [visitor][K(defn greetingBuilder [greeting]
[K   (fn [visitor][K[K      (str greeting ", " visitor "!")      (str greeting ", " visitor "!")[K   (fn [visitor]
[K      (str greeting ", " visitor "!")[K[K   )[K      (str greeting ", " visitor "!")
[K   )[K[K)[K   )
[K)[K)
#'user/greetingBuilder
user=> [Kuser=> [Kuser=> (def csGreeting (greetingBuilder "Welcome to CS 214")user=> (def csGreeting (greetingBuilder "Welcome to CS 214"))user=> (def csGreeting (greetingBuilder "Welcome to CS 214"))user=> [K(def csGreeting (greetingBuilder "Welcome to CS 214"))
#'user/csGreeting
user=> [Kuser=> [Kuser=> (def englishGreeting (greetingBuilder "Hello")(greetingBuilder "Hello"))user=> (def englishGreeting (greetingBuilder "Hello"))user=> [K(def englishGreeting (greetingBuilder "Hello"))
#'user/englishGreeting
user=> [Kuser=> [Kuser=> (def frenchGreeting (greetingBuilder "Bonjour")(greetingBuilder "Bonjour"))user=> (def frenchGreeting (greetingBuilder "Bonjour"))user=> [K(def frenchGreeting (greetingBuilder "Bonjour"))
#'user/frenchGreeting
user=> [Kuser=> [Kuser=> (csGreeting "Ann")user=> (csGreeting "Ann")user=> [K(csGreeting "Ann")
"Welcome to CS 214, Ann!"
user=> [Kuser=> [Kuser=> (englishGreeting "Chris")user=> (englishGreeting "Chris")user=> [K(englishGreeting "Chris")
"Hello, Chris!"
user=> [Kuser=> [Kuser=> (frenchGreeting "Chris")user=> (frenchGreeting "Chris")user=> [K(frenchGreeting "Chris")
"Bonjour, Chris!"
user=> [Kuser=> [Kuser=> 
[K]0;ldc6@gold31: ~[01;32mldc6ngBuilder "Welcome to CS 214"))user=> [K(def csGreeting (greetingBuilder "Welcome to CS 214"))
#'user/csGreeting
user=> [Kuser=> [Kuser=> (def englishGreeting (greetingBuilder "Hello")(greetingBuilder "Hello"))user=> (def englishGreeting (greetingBuilder "Hello"))user=> [K(def englishGreeting (greetingBuilder "Hello"))
#'user/englishGreeting
user=> [Kuser=> [Kuser=> (def frenchGreeting (greetingBuilder "Bonjour")(greetingBuilder "Bonjour"))user=> (def frenchGreeting (greetingBuilder "Bonjour"))user=> [K(def frenchGreeting (greetingBuilder "Bonjour"))
#'user/frenchGreeting
user=> [Kuser=> [Kuser=> (csGreeting "Ann")user=> (csGreeting "Ann")user=> [K(csGreeting "Ann")
"Welcome to CS 214, Ann!"
user=> [Kuser=> [Kuser=> (englishGreeting "Chris")user=> (englishGreeting "Chris")user=> [K(englishGreeting "Chris")
"Hello, Chris!"
user=> [Kuser=> [Kuser=> (frenchGreeting "Chris")user=> (frenchGreeting "Chris")user=> [K(frenchGreeting "Chris")
"Bonjour, Chris!"
user=> [Kuser=> [Kuser=> 
[K]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ exit
Script done, file is 5.script
]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ cat 5.script
Script started on 2022-02-12 00:45:14-05:00 [TERM="xterm-256color" TTY="/dev/pts/7" COLUMNS="80" LINES="24"]
]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (defn incMaker [incValue][incValue]user=> [K[K   (fn [x][x][K(defn incMaker [incValue]
[K   (fn [x][K[K     (+ x incValue)     (+ x incValue)[K   (fn [x]
[K     (+ x incValue)[K[K   )[K     (+ x incValue)
[K   )[K[K)[K   )
[K)[K)
[K#'user/incMaker
user=> [Kuser=> [Kuser=> (def inc5 (incMaker 5)(incMaker 5))user=> (def inc5 (incMaker 5))user=> [K(def inc5 (incMaker 5))
#'user/inc5
user=> [Kuser=> [Kuser=> inc5 [1@ [1@( inc5  5 ) user=> ( inc5 5)user=> [K( inc5 5) 
10
user=> [Kuser=> [Kuser=> (defn greetingBuilder [greeting][greeting]user=> [K[K   (fn [visitor]   (fn [visitor][K(defn greetingBuilder [greeting]
[K   (fn [visitor][K[K      (str greeting ", " visitor "!")      (str greeting ", " visitor "!")[K   (fn [visitor]
[K      (str greeting ", " visitor "!")[K[K   )[K      (str greeting ", " visitor "!")
[K   )[K[K)[K   )
[K)[K)
#'user/greetingBuilder
user=> [Kuser=> [Kuser=> (def csGreeting (greetingBuilder "Welcome to CS 214")user=> (def csGreeting (greetingBuilder "Welcome to CS 214"))user=> (def csGreeting (greetingBuilder "Welcome to CS 214"))user=> [K(def csGreeting (greetingBuilder "Welcome to CS 214"))
#'user/csGreeting
user=> [Kuser=> [Kuser=> (def englishGreeting (greetingBuilder "Hello")(greetingBuilder "Hello"))user=> (def englishGreeting (greetingBuilder "Hello"))user=> [K(def englishGreeting (greetingBuilder "Hello"))
#'user/englishGreeting
user=> [Kuser=> [Kuser=> (def frenchGreeting (greetingBuilder "Bonjour")(greetingBuilder "Bonjour"))user=> (def frenchGreeting (greetingBuilder "Bonjour"))user=> [K(def frenchGreeting (greetingBuilder "Bonjour"))
#'user/frenchGreeting
user=> [Kuser=> [Kuser=> (csGreeting "Ann")user=> (csGreeting "Ann")user=> [K(csGreeting "Ann")
"Welcome to CS 214, Ann!"
user=> [Kuser=> [Kuser=> (englishGreeting "Chris")user=> (englishGreeting "Chris")user=> [K(englishGreeting "Chris")
"Hello, Chris!"
user=> [Kuser=> [Kuser=> (frenchGreeting "Chris")user=> (frenchGreeting "Chris")user=> [K(frenchGreeting "Chris")
"Bonjour, Chris!"
user=> [Kuser=> [Kuser=> 
[K]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ exit

Script done on 2022-02-12 00:48:07-05:00 [COMMAND_EXIT_CODE="0"]
tingBuilder "Hello"))
#'user/englishGreeting
user=> [Kuser=> [Kuser=> (englishGreeting "Chris")user=> (englishGreeting "Chris")user=> [K(englishGreeting "Chris")
"Hello, Chris!"
user=> [Kuser=> [Kuser=> (def csGreeting (greetingBuilder "Welcome to CS 214")user=> (def csGreeting (greetingBuilder "Welcome to CS 214"))user=> (def csGreeting (greetingBuilder "Welcome to CS 214"))user=> [K(def csGreeting (greetingBuilder "Welcome to CS 214"))
#'user/csGreeting
user=> [Kuser=> [Kuser=> (csGreeting "Ann")user=> (csGreeting "Ann")user=> [K(csGreeting "Ann")
"Welcome to CS 214, Ann!"
user=> [Kuser=> [Kuser=> (defn incMaker [incValue][incValue]user=> [K[K   (fn [x][x][K(defn incMaker [incValue]
[K   (fn [x][K[K     (+ x incValue)     (+ x incValue)[K   (fn [x]
[K     (+ x incValue)[K[K   )[K     (+ x incValue)
[K   )[K[K)[K   )
[K)[K)
#'user/incMaker
user=> [Kuser=> [Kuser=> inc5 [Kinc5 
#object[user$incMaker$fn__136 0x3f36b447 "user$incMaker$fn__136@3f36b447"]
user=> [Kuser=> [Kuser=> inc5 5)[1@ [1@([K( inc5 5)
10
user=> [Kuser=> [Kuser=> 
[K]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ script 5.script
Script started, file is 5.script
]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (defn incMaker [incValue][incValue]user=> [K[K   (fn [x][x][K(defn incMaker [incValue]
[K   (fn [x][K[K     (+ x incValue)     (+ x incValue)[K   (fn [x]
[K     (+ x incValue)[K[K   )[K     (+ x incValue)
[K   )[K[K)[K   )
[K)[K)
[K#'user/incMaker
user=> [Kuser=> [Kuser=> inc5[Kinc5
Syntax error compiling at (REPL:0:0).
Unable to resolve symbol: inc5 in this context
user=> [Kuser=> [Kuser=> inc5[1@ [1@( inc5 5)user=> ( inc5 5)user=> [K( inc5 5)
Syntax error compiling at (REPL:1:1).
Unable to resolve symbol: inc5 in this context
user=> [Kuser=> [Kuser=> (defn incMaker [incValue][incValue]user=> [K[K   (fn [x][x][K(defn incMaker [incValue]
[K   (fn [x][K[K     (+ x incValue)     (+ x incValue)[K   (fn [x]
[K     (+ x incValue)[K[K   )[K     (+ x incValue)
[K   )[K[K)[K   )
[K)[K)
#'user/incMaker
user=> [Kuser=> [Kuser=> ( inc5  )( inc5)( [K( inc5)
Syntax error compiling at (REPL:1:1).
Unable to resolve symbol: inc5 in this context
user=> [Kuser=> [Kuser=> (defn incMaker [incValue][incValue]user=> [K[K   (fn [x][x][K(defn incMaker [incValue]
[K   (fn [x][K[K     (+ x incValue)     (+ x incValue)[K   (fn [x]
[K     (+ x incValue)[K[K   )[K     (+ x incValue)
[K   )[K[K)[K   )
[K)[K)
#'user/incMaker
user=> [Kuser=> [Kuser=> (inc5 5)(inc5 5)[K(inc5 5)
Syntax error compiling at (REPL:1:1).
Unable to resolve symbol: inc5 in this context
user=> [Kuser=> [Kuser=> 
[K]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ script 5.script
Script started, file is 5.script
]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (defn incMaker [incValue][incValue]user=> [K[K   #(+ % incValue)   #(+ % incValue)[K(defn incMaker [incValue]
[K   #(+ % incValue)[K[K)[K   #(+ % incValue)
[K)[K)
[K#'user/incMaker
user=> [Kuser=> [Kuser=> (inc5 5)(inc5 5)[K(inc5 5)
Syntax error compiling at (REPL:1:1).
Unable to resolve symbol: inc5 in this context
user=> [Kuser=> [Kuser=> 
[K]0;ldc6@gold31: ~[01;32mldc6@gold31[00m:[01;34m~[00m$ script.  5.script
Script star