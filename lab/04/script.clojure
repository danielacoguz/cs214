Script started on 2022-02-04 23:58:11-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="154" LINES="12"]
]0;ldc6@remotel3: ~/cs214/Labs/04/Clojure/src[01;32mldc6@remotel3[00m:[01;34m~/cs214/Labs/04/Clojure/src[00m$ exit[Kexitclojure -m logTable[3Pat logTable.clj
;;;; logTable.clj displays a table of logarithms.
;;;;
;;;; Input: start, stop and increment, three numbers.
;;;; Precondition: start < stop && increment > 0.
;;;; Output: A table of logarithms from start to stop,
;;;;          with interval of increment.
;;;;
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Daniela Contreras
;;;; Date: 02/04/22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns logTable)                                 ; name the program

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; displayLogTable() recursively generates the log-table.
;;; Receive: start the first value for the table;
;;;          stop, the last  value for the table;
;;;           step, the step value for the table;
;;; Precondition: start < stop && increment > 0.
;;; Output: The table of logs from start to stop, by step.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; direct-recursive version
;; Pure Recursive
(defn displayLogTable [start, stop, increment] ;;arguments inside function
  (if (<= start stop) ;;if loop starting
    (do ;;tells if statement what to do
    ;; prints text out 
    ;; but also the \n is necessary to include all other results
      (printf "log of %f is %f\n" start (Math/log10 start)) 

      (displayLogTable (+ start increment) stop increment)
    )
  )
)
;;Using Loop recursion
;; loop (indirect-recursion) version
(defn displayLogTable2 [start stop step]
  (loop [i start]                           ; set i to start
    (when (<= i stop)                       ; if i <= stop:
      (printf "The logarithm of %f is %f\n" ;  print one line
                  i (Math/log10 i)
      )
      (recur (+ i step))                    ; recurse, i += step
    )
  )
)
;; indirect/tail-recursive version (just using recur)
(defn displayLogTable3 [start stop step]
  (if (<= start stop)                     ; if start <= stop:
    (do                                      ; do these two things:
      (printf "The logarithm of %f is %f\n"  ; - print one line
                  start (Math/log10 start)
      )
      (recur (+ start step) stop step)       ; - recurse, start+=step
    )
  )
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; -main is a 'driver' for the displayLogTable() functions.
;;; Input: start, stop and increment.
;;; Output: The table of logarithms 
;;;          from start to stop by increment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn -main []
 (println "To display a table of logarithms,")
 (print " enter the start, stop, and increment values: ") (flush)
 (let
    [ start (double (read))
      stop (double (read))
      increment (double (read))
    ] 
    (println)
    (displayLogTable start stop increment) 
    (println)
    (displayLogTable2 start stop increment) 
    (println)
    (displayLogTable3 start stop increment) 
    (println)
 )
)

]0;ldc6@remotel3: ~/cs214/Labs/04/Clojure/src[01;32mldc6@remotel3[00m:[01;34m~/cs214/Labs/04/Clojure/src[00m$ cat logTable.cljexit[Kcat logTable.cljexit[Kclojure -m logTable
To display a table of logarithms,
 enter the start, stop, and increment values: 1
10
0.5

log of 1.000000 is 0.000000
log of 1.500000 is 0.176091
log of 2.000000 is 0.301030
log of 2.500000 is 0.397940
log of 3.000000 is 0.477121
log of 3.500000 is 0.544068
log of 4.000000 is 0.602060
log of 4.500000 is 0.653213
log of 5.000000 is 0.698970
log of 5.500000 is 0.740363
log of 6.000000 is 0.778151
log of 6.500000 is 0.812913
log of 7.000000 is 0.845098
log of 7.500000 is 0.875061
log of 8.000000 is 0.903090
log of 8.500000 is 0.929419
log of 9.000000 is 0.954243
log of 9.500000 is 0.977724
log of 10.000000 is 1.000000

The logarithm of 1.000000 is 0.000000
The logarithm of 1.500000 is 0.176091
The logarithm of 2.000000 is 0.301030
The logarithm of 2.500000 is 0.397940
The logarithm of 3.000000 is 0.477121
The logarithm of 3.500000 is 0.544068
The logarithm of 4.000000 is 0.602060
The logarithm of 4.500000 is 0.653213
The logarithm of 5.000000 is 0.698970
The logarithm of 5.500000 is 0.740363
The logarithm of 6.000000 is 0.778151
The logarithm of 6.500000 is 0.812913
The logarithm of 7.000000 is 0.845098
The logarithm of 7.500000 is 0.875061
The logarithm of 8.000000 is 0.903090
The logarithm of 8.500000 is 0.929419
The logarithm of 9.000000 is 0.954243
The logarithm of 9.500000 is 0.977724
The logarithm of 10.000000 is 1.000000

The logarithm of 1.000000 is 0.000000
The logarithm of 1.500000 is 0.176091
The logarithm of 2.000000 is 0.301030
The logarithm of 2.500000 is 0.397940
The logarithm of 3.000000 is 0.477121
The logarithm of 3.500000 is 0.544068
The logarithm of 4.000000 is 0.602060
The logarithm of 4.500000 is 0.653213
The logarithm of 5.000000 is 0.698970
The logarithm of 5.500000 is 0.740363
The logarithm of 6.000000 is 0.778151
The logarithm of 6.500000 is 0.812913
The logarithm of 7.000000 is 0.845098
The logarithm of 7.500000 is 0.875061
The logarithm of 8.000000 is 0.903090
The logarithm of 8.500000 is 0.929419
The logarithm of 9.000000 is 0.954243
The logarithm of 9.500000 is 0.977724
The logarithm of 10.000000 is 1.000000

]0;ldc6@remotel3: ~/cs214/Labs/04/Clojure/src[01;32mldc6@remotel3[00m:[01;34m~/cs214/Labs/04/Clojure/src[00m$ exit
exit

Script done on 2022-02-04 23:58:47-05:00 [COMMAND_EXIT_CODE="0"]
