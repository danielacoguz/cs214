Example1.lex OBSERVATION	
	For example1.lex when we open the file generated by flex(lex.yy.c) in Visual Code Studio, we can see that lines 726-748 include
the different commands that the code orders the terminal to display depending on what the user inputs. For instance, the first case states
that when the user enters "start" to basically command line 6 from our exaple1.lex --> start printf("Start command received\n"); 
	Similarly Case 2 does the same when the user enters "Stop" except it will now read line 7 from our example1.lex And finally Case 3
if any other word is typed besides Start or Stop then it will "ECHO" or repeat that word that the user typed. Case 4 terminates the program. 

Example2.lex OBSERVATION
	For example2.lex when we open the file generated by flex(lex.yy.c) in the Terminal and enter random digits between 0-9 it will 
let us know we've typed in a number. Finally when we type in letters capitalized or represented by numbers as the anything but the first 
"letter"/token it will still represent it as a word. However, if we have the first token be a number and the rest of the line letters it
will generate both NUMBER and LETTER.
Have one of your test inputs include an underscore. What happens? Why? When we include an underscore before a letter or a number like
_9 or _hello the generated output will still tell us if its a word or a number however it will also include an underscore like "_WORD"
I have now changed the code to include an underscore in the code in order to still recognize when a NUMBER or a WORD is typed.
and it looks as follows:
%{
#include <stdio.h>
%}

%%
[_0123456789]+           printf("NUMBER\n");
[_a-zA-Z][_a-zA-Z0-9]*    printf("WORD\n");
%%

Example3.lex OBSERVATION
After creating a scanner for example 3 we ran the code in STUDENTINFO.h file and had the scanner itself read from the file 
and tell us chracter/token by token what type of catagory that each token falls under inside the file/code. 
as we can see, after inputing the scanner to read the files, the terminal obtained these results;
KEYWORD: class
IDENTIFIER: StudentInfo
PUNCTUATION: {
KEYWORD: public
PUNCTUATION: :
IDENTIFIER: StudentInfo
PUNCTUATION: (
PUNCTUATION: )
PUNCTUATION: {
IDENTIFIER: myGPA
OPERATOR: =
DOUBLE: 0.0 (0)
PUNCTUATION: ;
IDENTIFIER: myHours
OPERATOR: =
INTEGER: 0 (0)
PUNCTUATION: ;
PUNCTUATION: }
IDENTIFIER: StudentInfo
PUNCTUATION: (
KEYWORD: double
IDENTIFIER: gpa
PUNCTUATION: ,
KEYWORD: int
IDENTIFIER: hours
PUNCTUATION: )
PUNCTUATION: {
IDENTIFIER: myGPA
OPERATOR: =
IDENTIFIER: gpa
PUNCTUATION: ;
IDENTIFIER: myHours
OPERATOR: =
IDENTIFIER: hours
PUNCTUATION: ;
PUNCTUATION: }
KEYWORD: private
PUNCTUATION: :
KEYWORD: double
IDENTIFIER: myGPA
PUNCTUATION: ;
KEYWORD: int
IDENTIFIER: myHours
PUNCTUATION: ;
PUNCTUATION: }
PUNCTUATION: ;
As we can tell the entire code file is here but every piece that makes the code work is labeled under its category. 

For example4.lex OBSERVATIONS
What differentiates a terminal from a non-terminal? 
Terminal symbols are components of sentences generated utilizing grammer, +, -
and basic letters like a,b,c etc, appearing on the left-hand side 
Non Terminal symbols are enclosed between angle brackets.
Run your temerpature controlled giving it some valid commands that use valid syntax. Do you see anything strange?
Yes the strange thing is that when the command heat on or off are typed, we receive a different output
than expected. We receive "Heat on or off" and for the syntax "set temperature 22" we receive "temperature set"

For example 5 OBSERVATIONS
switching the temperature code was a sucess as long as the user inputed "set temperature" and $ with some number it outputed "temperature set NUMBER" to any number given after the $ token.




